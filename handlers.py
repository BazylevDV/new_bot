import logging
from aiogram import Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import app.keyboards as kb
from app.email_utils import send_email
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramAPIError
import asyncio
from app.file_paths import FILE_PATHS, MIME_TYPES  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
import re  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º re –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
import os  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class EmailRequest(StatesGroup):
    email = State()


def setup_handlers(dp: Dispatcher):
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        main_menu = kb.get_main_menu()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=main_menu)
        await message.answer('–í–Ω–∏–∑—É –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é. ‚ú®')  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    @dp.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—èüóÇÔ∏è")
    async def catalog_handler(message: types.Message, state: FSMContext):
        await state.set_state(EmailRequest.email)
        await state.update_data(file_type="catalog")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µüì´ :")

    @dp.message(F.text == "–°–∫–ª–∞–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüíí")
    async def warehouse_handler(message: types.Message, state: FSMContext):
        await state.set_state(EmailRequest.email)
        await state.update_data(file_type="warehouse")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –∏ —Ü–µ–Ω–∞—Öüì´ :")

    @dp.message(F.text == "–£—Å–ø–µ–π –∫—É–ø–∏—Ç—å –ø–æ –∞–∫—Ü–∏–∏-1‚òéÔ∏è")
    async def promo_handler_1(message: types.Message, state: FSMContext):
        await state.set_state(EmailRequest.email)
        await state.update_data(file_type="promo1")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –ø–æ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏üì´ :")

    @dp.message(F.text == "–£—Å–ø–µ–π –∫—É–ø–∏—Ç—å –ø–æ –∞–∫—Ü–∏–∏-2‚òéÔ∏è")
    async def promo_handler_2(message: types.Message, state: FSMContext):
        await state.set_state(EmailRequest.email)
        await state.update_data(file_type="promo2")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É –ø–æ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏üì´ :")

    @dp.message(StateFilter(EmailRequest.email))
    async def process_email_request(message: types.Message, state: FSMContext):
        try:
            email = message.text
            if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            await state.update_data(email=email)
            await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await send_file(message, state)
            await send_and_clear_state(message, state)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def send_and_clear_state(message: types.Message, state: FSMContext):
        try:
            data = await state.get_data()
            email = data.get("email")
            file_type = data.get("file_type", "unknown")  # –î–æ–±–∞–≤–ª—è–µ–º file_type

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subject_user = f"–û—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –∑–∞–ø—Ä–æ—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ {file_type} –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ü–∞—Ä–∏—Ç–µ—Ç."

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            body_user = (
                """
                –§–∏–ª–∏–∞–ª –≥—Ä—É–ø–ø—ã –∫–æ–º–ø–∞–Ω–∏–π '–ü–∞—Ä–∏—Ç–µ—Ç',
                –æ—Ñ–∏—Å –∏ —Å–∫–ª–∞–¥ : –ß–µ–ª—è–±–∏–Ω—Å–∫, –ü–æ—Å—Ç—ã—à–µ–≤–∞ 2, 
                —Ç–µ–ª. (+7-351-274-40-17, 274-40-19, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ 120, 121, 107).
                """
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_email(email, subject_user, body_user, file_type)  # –ü–µ—Ä–µ–¥–∞–µ–º file_type
            logger.info(f"Email sent to {email} with subject: {subject_user}")
        except Exception as e:
            logger.error(f"Failed to send email to {email}: {e}")

        await message.answer("–í—ã–±—Ä–∞–ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ? - –∂–º–∏—Ç–µ '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ö–ü'. –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∂–º–∏—Ç–µ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'. –ë–ª–∞–≥–æ–¥–∞—Ä—éü§ù !", reply_markup=kb.get_main_menu())
        await state.finish()

    @dp.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìù")
    async def info_handler(message: types.Message):
        info_text = (
            "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –±–æ—Ç–∞ –ø–æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ –∏ —Ü–µ–Ω–∞–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–µ—Ä—Ç–æ–π, "
            "—É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º —á–µ–ª—è–±–∏–Ω—Å–∫–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –≥—Ä—É–ø–ø—ã –∫–æ–º–ø–∞–Ω–∏–π '–ü–∞—Ä–∏—Ç–µ—Ç' "
            "–ø–æ –∞–¥—Ä–µ—Å—É –ß–µ–ª—è–±–∏–Ω—Å–∫ —É–ª. –ü–æ—Å—Ç—ã—à–µ–≤–∞ –¥.2 –æ—Ñ–∏—Å 104, 101 –≥–æ—Ä–æ–¥—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: +7-351-274-40-17, "
            "351-274-40-19 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ 120, 121 –ª–∏–±–æ 107) –ª–∏–±–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ö–ü –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –í–∞–º–∏ –ø–æ—á—Ç—É."
        )
        await message.answer(info_text)

    async def send_file(message: types.Message, state: FSMContext):
        try:
            data = await state.get_data()
            email = data.get("email")
            file_type = data.get("file_type")

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –µ–≥–æ MIME-—Ç–∏–ø
            file_path = FILE_PATHS.get(file_type)
            mime_type = MIME_TYPES.get(file_type)

            if not file_path or not mime_type:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file = FSInputFile(file_path)
            await message.answer_document(file)

            await message.answer(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å {email}.")
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    async def remind_user(message: types.Message, state: FSMContext):
        await asyncio.sleep(60 * 5)  # 5 –º–∏–Ω—É—Ç
        data = await state.get_data()
        if data.get("email") is None:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏  —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å?")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.reminder_keyboard())

    @dp.callback_query(F.data == "continue")
    async def continue_session(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ–∞–Ω—Å. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å  —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")

    @dp.callback_query(F.data == "finish")
    async def finish_session(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await state.finish()
        await callback_query.message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!", reply_markup=kb.get_main_menu())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ EmailRequest.email
    @dp.message(StateFilter(EmailRequest.email))
    async def start_reminder(message: types.Message, state: FSMContext):
        asyncio.create_task(remind_user(message, state))
        await asyncio.sleep(0)  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ

    # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
    @dp.message(Command("admin"))
    async def admin_panel(message: types.Message):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if message.from_user.id == int(os.getenv("ADMIN_CHAT_ID")):
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_keyboard())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")