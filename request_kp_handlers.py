import logging
from aiogram import Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import app.keyboards as kb
from app.email_utils import send_email
import asyncio
from app.file_paths import FILE_PATHS, MIME_TYPES  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
import re  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º re –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
from db import create_connection, create_request  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class Email(StatesGroup):
    email = State()
    organization = State()
    equipment = State()
    phone = State()
    manager = State()


def setup_request_kp_handlers(dp: Dispatcher):
    @dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ö–üüñäÔ∏è")
    async def request_kp_handler(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is not None:
            await message.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞—è–≤–∫—É. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=kb.restart_keyboard())
        else:
            logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ö–ü –ø–æ–ª—É—á–µ–Ω")
            await state.set_state(Email.email)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:", reply_markup=kb.back_keyboard())

    @dp.callback_query(F.data == "continue_kp")
    async def continue_kp_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        current_state = await state.get_state()
        if current_state == Email.email:
            await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        elif current_state == Email.organization:
            await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        elif current_state == Email.equipment:
            await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ:")
        elif current_state == Email.phone:
            await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
        elif current_state == Email.manager:
            await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=kb.manager_keyboard())

    @dp.callback_query(F.data == "restart_kp")
    async def restart_kp_handler(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await state.set_state(Email.email)
        await callback_query.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")

    @dp.message(StateFilter(Email.email))
    async def process_email(message: types.Message, state: FSMContext):
        try:
            email = message.text
            if not re.match(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            await state.update_data(email=email)
            await state.set_state(Email.organization)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:üëá", reply_markup=kb.back_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @dp.message(StateFilter(Email.organization))
    async def process_organization(message: types.Message, state: FSMContext):
        try:
            organization = message.text
            if not organization.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            await state.update_data(organization=organization)
            await state.set_state(Email.equipment)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–∏–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù–µ –±–æ–ª–µ–µ 120 –∑–Ω–∞–∫–æ–≤:‚úçÔ∏è ", reply_markup=kb.back_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.üíÅ‚Äç‚ôÇÔ∏è ")

    @dp.message(StateFilter(Email.equipment))
    async def process_equipment(message: types.Message, state: FSMContext):
        try:
            equipment = message.text
            if not equipment.strip() or len(equipment) > 120:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 120 –∑–Ω–∞–∫–æ–≤
                await message.answer("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 120 –∑–Ω–∞–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            await state.update_data(equipment=equipment)
            await state.set_state(Email.phone)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏,üíÅ‚Äç‚ôÇÔ∏è –ø—Ä–∏–º–µ—Ä: +7(351)3232623", reply_markup=kb.back_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @dp.message(StateFilter(Email.phone))
    async def process_phone(message: types.Message, state: FSMContext):
        try:
            phone = message.text
            if not re.match(r'^\+\d+\(\d+\)\d{4,8}$|^\+\d{11,}$', phone):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞,üíÅ‚Äç‚ôÇÔ∏è –ø—Ä–∏–º–µ—Ä: +7(351)3232623.")
                return
            await state.update_data(phone=phone)
            await state.set_state(Email.manager)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=kb.manager_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @dp.callback_query(F.data.in_(["–î—Ä—É–∂–∏–Ω–∏–Ω–∞ –¢–∞—Ç—å—è–Ω–∞", "–ö–æ–≤–∞—á –ê–ª–µ–∫—Å–∞–Ω–¥—Ä"]), StateFilter(Email.manager))
    async def process_manager_choice(callback_query: types.CallbackQuery, state: FSMContext):
        try:
            await callback_query.answer()
            manager = callback_query.data
            await state.update_data(manager=manager)
            await send_and_clear_state(callback_query.message, state)
            await callback_query.message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω, –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏.")
            await callback_query.message.answer("–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞ @LabDealsBot", reply_markup=kb.subscribe_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @dp.callback_query(F.data == "back")
    async def process_back(callback_query: types.CallbackQuery, state: FSMContext):
        try:
            await callback_query.answer()
            await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.get_main_menu())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥': {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def send_and_clear_state(message: types.Message, state: FSMContext):
        try:
            data = await state.get_data()
            email = data.get("email")
            organization = data.get("organization")
            equipment = data.get("equipment")
            phone = data.get("phone")
            manager = data.get("manager")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –ø–∏—Å—å–º–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            subject_manager = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ö–ü –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ—Ç Paritetbot"

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            body_manager = (
                "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ Paritetbot, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ö–ü:\n"
                f"–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã: {email}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {organization}\n"
                f"–í–∏–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {equipment}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager}\n"
                "\n"
                "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n"
                "–ö–æ–º–∞–Ω–¥–∞ Paritetbot\n"
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã: dmbazylev@gmail.com\n"
            )

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
            if manager == "–î—Ä—É–∂–∏–Ω–∏–Ω–∞ –¢–∞—Ç—å—è–Ω–∞":
                recipient = "paritet121.0@gmail.com"
            elif manager == "–ö–æ–≤–∞—á –ê–ª–µ–∫—Å–∞–Ω–¥—Ä":
                recipient = "lab_paritet@mail.ru"
            else:
                recipient = "dmbazylev@ya.ru"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            await send_email(recipient, subject_manager, body_manager, None)  # –ü–µ—Ä–µ–¥–∞–µ–º None –¥–ª—è file_type
            logger.info(f"Email sent to {recipient} with subject: {subject_manager}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ø–∏–∏ –ø–∏—Å—å–º–∞ –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å
            await send_email("dmbazylev@ya.ru", subject_manager, body_manager, None)  # –ü–µ—Ä–µ–¥–∞–µ–º None –¥–ª—è file_type
            logger.info(f"Email sent to dmbazylev@ya.ru with subject: {subject_manager}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            database = "database.db"
            conn = create_connection(database)
            if conn is not None:
                request = (organization, email, phone)
                create_request(conn, request)
            else:
                logger.error("–û—à–∏–±–∫–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")

            await state.finish()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    async def remind_user(message: types.Message, state: FSMContext):
        await asyncio.sleep(60 * 1)  # 1 –º–∏–Ω—É—Ç
        data = await state.get_data()
        if data.get("email") is None:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ–∞–Ω—Å?")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.reminder_keyboard())

    @dp.callback_query(F.data == "continue")
    async def continue_session(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await callback_query.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ–∞–Ω—Å. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")

    @dp.callback_query(F.data == "finish")
    async def finish_session(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer()
        await state.finish()
        await callback_query.message.answer("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!", reply_markup=kb.get_main_menu())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Email.email
    @dp.message(StateFilter(Email.email))
    async def start_reminder(message: types.Message, state: FSMContext):
        asyncio.create_task(remind_user(message, state))
        await asyncio.sleep(0)